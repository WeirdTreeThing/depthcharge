# SPDX-License-Identifier: GPL-2.0

testsrc := $(src)/tests
testobj := $(obj)/tests
objutil := $(obj)/util
objext := $(obj)/external

# Set default path for EC_HEADERS if provided does not contain ec_headers.h
EC_HEADERS ?= ../../src/ec/google/chromeec
ifeq ($(wildcard $(EC_HEADERS)/ec_commands.h),)
EC_HEADERS := ../ec/include
endif
ifeq ($(wildcard $(EC_HEADERS)/ec_commands.h),)
$(error Please set EC_HEADERS= to directory containing ec_commands.h!)
endif

# coreboot source directory - for commonlib/bsd includes
CB_SOURCE ?= ../coreboot
ifeq ($(wildcard $(CB_SOURCE)),)
# If directory pointed by CB_SOURCE is empty then assume coreboot
# is in the Chromium OS SDK directory
CB_SOURCE := ../../third_party/coreboot
endif
ifeq ($(wildcard $(CB_SOURCE)),)
$(error Please set CB_SOURCE= to directory containing coreboot sources!)
endif

# Libpayload source directory in the coreboot project
LP_SOURCE ?= ../libpayload
ifeq ($(wildcard $(LP_SOURCE)),)
# If directory pointed by LP_SOURCE is empty then assume libpayload
# is in the Chromium OS SDK coreboot directory
LP_SOURCE := ../../third_party/coreboot/payloads/libpayload
endif
ifeq ($(wildcard $(LP_SOURCE)),)
$(error Please set LP_SOURCE= to directory containing libpayload sources!)
endif

corebootsrc := $(CB_SOURCE)
libpayloadsrc := $(LP_SOURCE)
libpayloadobj := $(objext)/libpayload
vbootobj := $(objext)/vboot

LIBPAYLOAD_LIB := $(libpayloadobj)/libpayload.a
VBOOT_LIB := $(vbootobj)/vboot_fw.a
TLCL_LIB := $(vbootobj)/tlcl.a

LIBPAYLOAD_DEFCONFIG := $(libpayloadsrc)/configs/defconfig
LIBPAYLOAD_DOTCONFIG := $(libpayloadobj)/.config
LIBPAYLOAD_KCONFIG_AUTOHEADER := $(libpayloadobj)/config.h
LIBPAYLOAD_KCONFIG_AUTOCONFIG := $(libpayloadobj)/auto.conf
LIBPAYLOAD_KCONFIG_DEPENDENCIES := $(libpayloadobj)/auto.conf.cmd
LIBPAYLOAD_KCONFIG_SPLITCONFIG := $(libpayloadobj)/config/
LIBPAYLOAD_KCONFIG_TRISTATE := $(libpayloadobj)/tristate.conf
LIBPAYLOAD_CONFIG := $(libpayloadobj)/libpayload-config.h

CMAKE := cmake
OBJCOPY ?= objcopy
OBJDUMP ?= objdump

TEST_CFLAGS :=
TEST_LDFLAGS :=

# Include generic test mock headers, before original ones
TEST_CFLAGS += -I$(testsrc)/include/mocks -I$(testsrc)/include

# Depthcharge includes
TEST_CFLAGS += -I$(obj) -I$(src)/src

# vboot_reference and ec-headers
TEST_CFLAGS += -I$(VB_SOURCE)/firmware/include -I$(EC_HEADERS)

# Libpayload flags
TEST_CFLAGS += -D__LIBPAYLOAD__=1
TEST_CFLAGS += -I$(libpayloadobj)
TEST_CFLAGS += -I$(libpayloadsrc)/include -I $(libpayloadsrc)/include/mock
TEST_CFLAGS += -I$(corebootsrc)/src/commonlib/bsd/include
TEST_CFLAGS += -include $(libpayloadsrc)/include/kconfig.h
TEST_CFLAGS += -include $(libpayloadsrc)/include/compiler.h

# Note: This is intentionally just a subset of the warnings in the toplevel
# Makefile.inc. We don't need to be as strict with test code, and things like
# -Wmissing-prototypes just make working with the test framework cumbersome.
# Only put conservative warnings here that really detect code that's obviously
# unintentional.
TEST_CFLAGS += -Wall -Werror -Wundef -Wstrict-prototypes

TEST_CFLAGS += -std=gnu11 -Os
TEST_CFLAGS += -ffunction-sections -fdata-sections -fno-builtin

ifneq ($(filter-out 0,$(TEST_PRINT)),)
TEST_CFLAGS += -D__TEST_PRINT__=1
endif

TEST_LDFLAGS += -Wl,--gc-sections -no-pie

# Extra attributes for unit tests, declared per test
attributes := srcs cflags config mocks

alltests :=
subdirs := tests/arch tests/base tests/board tests/boot tests/debug \
	tests/diag tests/drivers tests/image tests/net tests/netboot tests/vboot

define tests-handler
alltests += $(1)$(2)
$(foreach attribute,$(attributes),
	$(eval $(1)$(2)-$(attribute) += $($(2)-$(attribute))))
$(foreach attribute,$(attributes),
	$(eval $(2)-$(attribute) := ))
endef

# Copy attributes of one test to another.
# $1 - input test name
# $2 - output test name
copy-test = $(foreach attr,$(attributes), \
		$(eval $(strip $(2))-$(attr) := $($(strip $(1))-$(attr))))

$(call add-special-class, tests)
$(call evaluate_subdirs)

default_mocks-srcs := src/vboot/callbacks/debug.c \
	tests/mocks/console.c \
	tests/mocks/halt.c \
	tests/mocks/timer.c \
	tests/mocks/util/commonparams.c
default_mocks := commonparams console_write halt vb2ex_abort vb2ex_printf

# Create actual targets for unit test binaries
# $1 - test name
#
# Generate config file using values provided in $(1)-config property.
# Add required libraries if requested by $(1)-props.
# Enable wrapping of mocked symbols
define TEST_CC_template
$(1)-config-file := $(obj)/$(1)/config.h
$$($(1)-config-file):
	mkdir -p $$(dir $$@)
	printf '// File generated by tests/Makefile.inc\n// Do not change\n\n' > $$@;
	printf '#ifndef TEST_DEPTHCHARGE_CONFIG_H_\n' >> $$@;
	printf '#define TEST_DEPTHCHARGE_CONFIG_H_\n' >> $$@;
	for kv in $$($(1)-config); do \
		key="`echo $$$$kv | cut -d '=' -f -1`"; \
		value="`echo $$$$kv | cut -d '=' -f 2-`"; \
		printf '#undef %s\n' "$$$$key" >> $$@; \
		printf '#define %s %s\n\n' "$$$$key" "$$$$value" >> $$@; \
	done
	printf '#endif\n' >> $$@;

$(1)-mocks += $(default_mocks)

# Weaken symbols listed as mocks to enable overriding in the code
$($(1)-srcobjs): OBJCOPY_FLAGS += $$(foreach mock,$$($(1)-mocks), \
	--globalize-symbol=$$(mock) --weaken-symbol=$$(mock))

# Compile sources and apply mocking/wrapping of selected symbols.
# For each listed mock add new symbol with prefix `__real_`,
# and pointing to the same section:address.
$($(1)-objs): TEST_CFLAGS += -include $$($(1)-config-file)
$($(1)-objs): $(obj)/$(1)/%.o: $$$$*.c $$($(1)-config-file) $(LIBPAYLOAD_CONFIG)
	@printf "    CC       $$(subst $$(obj)/,,$$(@))\n"
	mkdir -p $$(dir $$@)
	$(HOSTCC) $(HOSTCFLAGS) $$(TEST_CFLAGS) $($(1)-cflags) -MMD \
		-MF $$(basename $$@).d -MT $$@ -c $$< -o $$@.orig
	@printf "    OBJCOPY  $$(subst $$(obj)/,,$$(@))\n"
	$(OBJCOPY) $$@.orig $$(OBJCOPY_FLAGS) $$@.orig2
	objcopy_wrap_flags=''; \
	for sym in $$($(1)-mocks); do \
		sym_line="$$$$($(OBJDUMP) -t $$@.orig2 | grep -E "[0-9a-fA-F]+\\s+w\\s+F\\s+.*\\s$$$$sym$$$$")"; \
		if [ ! -z "$$$$sym_line" ] ; then \
			addr="$$$$(echo "$$$$sym_line" | awk '{ print $$$$1 }')"; \
			section="$$$$(echo "$$$$sym_line" | awk '{ print $$$$(NF - 2) }')"; \
			objcopy_wrap_flags="$$$$objcopy_wrap_flags --add-symbol __real_$$$${sym}=$$$${section}:0x$$$${addr},function,global"; \
		fi \
	done ;\
	$(OBJCOPY) $$@.orig2 $$$$objcopy_wrap_flags $$@


$(1)-vboot := $(obj)/$(1)/$$(notdir $(VBOOT_LIB))
$$($(1)-vboot): $(VBOOT_LIB)
	mkdir -p $$(dir $$@)
	$(OBJCOPY) $$^ $$(foreach mock,$$($(1)-mocks), \
		--globalize-symbol=$$(mock) --weaken-symbol=$$(mock)) $$@

$(1)-tlcl := $(obj)/$(1)/$$(notdir $(TLCL_LIB))
$$($(1)-tlcl): $(TLCL_LIB)
	mkdir -p $$(dir $$@)
	$(OBJCOPY) $$^ $$(foreach mock,$$($(1)-mocks), \
		--globalize-symbol=$$(mock) --weaken-symbol=$$(mock)) $$@

$(1)-libpayload := $(obj)/$(1)/$$(notdir $(LIBPAYLOAD_LIB))
$$($(1)-libpayload): $(LIBPAYLOAD_LIB)
	mkdir -p $$(dir $$@)
	$(OBJCOPY) $$^ $$(foreach mock,$$($(1)-mocks), \
		--globalize-symbol=$$(mock) --weaken-symbol=$$(mock)) $$@

$($(1)-bin): $($(1)-objs) $$($(1)-vboot) $$($(1)-tlcl) $$($(1)-libpayload)
	@printf "    CC       $$(subst $$(obj)/,,$$(@))\n"
	mkdir -p $$(dir $$@)
	$(HOSTCC) $$(TEST_LDFLAGS) -lcmocka $$^ \
		-Wl,--exclude-libs,ALL -lc $($(1)-cflags) -o $$@
endef

$(foreach test, $(alltests), \
	$(eval $(test)-srcobjs := $(addprefix $(obj)/$(test)/, \
		$(patsubst %.c,%.o,$(filter src/%,$($(test)-srcs))))) \
	$(eval $(test)-objs := $(addprefix $(obj)/$(test)/, \
		$(patsubst %.c,%.o,$($(test)-srcs))))\
	$(eval $(test)-objs += $(addprefix $(obj)/$(test)/, \
		$(patsubst %.c,%.o,tests/stubs/heap.c $(default_mocks-srcs)))))
$(foreach test, $(alltests), \
	$(eval $(test)-bin := $(obj)/$(test)/run))
$(foreach test, $(alltests), \
	$(eval $(call TEST_CC_template,$(test))))
$(foreach test, $(alltests), \
	$(eval all-test-objs += $($(test)-objs)))
$(foreach test, $(alltests), \
	$(eval test-bins += $($(test)-bin)))

DEPENDENCIES += $(addsuffix .d,$(basename $(all-test-objs)))
-include $(DEPENDENCIES)

# Configure and build libpayload from sources
$(LIBPAYLOAD_DOTCONFIG):
	mkdir -p $(dir $@)
	cp $(LIBPAYLOAD_DEFCONFIG) $@
	printf '\nCONFIG_LP_CHROMEOS=y\n' >> $@;
	printf '\nCONFIG_LP_ARCH_MOCK=y\n' >> $@;
	byte_order="x`python -c 'import sys; print(sys.byteorder)' 2>&1`"; \
	if [ "$$byte_order" == "xbig" ] ; then \
		printf '\nCONFIG_LP_ARCH_MOCK_BIG_ENDIAN=y\n' >> $@; \
	elif [ "$$byte_order" == "xlittle" ] ; then \
		printf '\nCONFIG_LP_ARCH_MOCK_BIG_ENDIAN=n\n' >> $@; \
	else \
		echo 'Failed to get machine byte order'; \
		exit 1; \
	fi

$(LIBPAYLOAD_KCONFIG_AUTOHEADER): LIBPAYLOAD_KCONFIG_FLAGS := \
	DOTCONFIG=$(LIBPAYLOAD_DOTCONFIG) \
	KCONFIG_AUTOHEADER=$(LIBPAYLOAD_KCONFIG_AUTOHEADER) \
	KCONFIG_AUTOCONFIG=$(LIBPAYLOAD_KCONFIG_AUTOCONFIG) \
	KCONFIG_DEPENDENCIES=$(LIBPAYLOAD_KCONFIG_DEPENDENCIES) \
	KCONFIG_SPLITCONFIG=$(LIBPAYLOAD_KCONFIG_SPLITCONFIG) \
	KCONFIG_TRISTATE=$(LIBPAYLOAD_KCONFIG_TRISTATE) \
	KBUILD_DEFCONFIG=$(LIBPAYLOAD_DEFCONFIG)

$(LIBPAYLOAD_KCONFIG_AUTOHEADER): $(LIBPAYLOAD_DOTCONFIG)
	mkdir -p $(dir $@)
	+$(MAKE) $(LIBPAYLOAD_KCONFIG_FLAGS) -C $(libpayloadsrc) \
		obj=$(libpayloadobj) olddefconfig
	+$(MAKE) $(LIBPAYLOAD_KCONFIG_FLAGS) -C $(libpayloadsrc) \
		obj=$(libpayloadobj) oldconfig

$(LIBPAYLOAD_LIB): $(LIBPAYLOAD_KCONFIG_AUTOHEADER)
	@printf "    MAKE       $(subst $(obj)/,,$(@))\n"
	+unset CFLAGS CXXFLAGS LDFLAGS && $(MAKE) -C $(libpayloadsrc) \
		HOSTCC=$(HOSTCC) CC=$(HOSTCC) CXX=$(HOSTCXX) AR=$(HOSTAR) AS=$(HOSTAS) \
		obj=$(libpayloadobj) DOTCONFIG=$(LIBPAYLOAD_DOTCONFIG) V=$(V) \
		EXTRA_CFLAGS="-Wno-address-of-packed-member"

$(LIBPAYLOAD_CONFIG): $(LIBPAYLOAD_KCONFIG_AUTOHEADER)
	mkdir -p $(dir $@)
	cp $< $@

# Build vboot
$(VBOOT_LIB):
	@printf "    MAKE       $(subst $(obj)/,,$(@))\n"
	+unset CFLAGS CXXFLAGS LDFLAGS && FIRMWARE_ARCH= \
		CC="$(HOSTCC)" \
		TEST_PRINT=$(TEST_PRINT) \
		$(MAKE) -C $(VB_SOURCE) \
		MOCK_TPM= \
		TPM2_MODE=1 \
		BOOT_EXTERNAL_ON_DEV= \
		EC_EFS= \
		DETACHABLE= \
		PHYSICAL_PRESENCE_KEYBOARD=1 \
		UNROLL_LOOPS=1 \
		BUILD=$(vbootobj) \
		V=$(V) \
		$(vbootobj)/vboot_fw.a tlcl

$(TLCL_LIB): $(VBOOT_LIB)

.PHONY: $(alltests) $(addprefix clean-,$(alltests))
.PHONY: unit-tests build-unit-tests run-unit-tests clean-unit-tests
.PHONY: list-unit-tests help-unit-tests

ifeq ($(JUNIT_OUTPUT),y)
$(alltests): export CMOCKA_MESSAGE_OUTPUT=xml
$(alltests): export CMOCKA_XML_FILE=$(testobj)/junit-$(subst /,_,$^)-%g.xml
endif

$(alltests): $$($$(@)-bin)
	rm -f $(testobj)/junit-$(subst /,_,$^)-*.xml $(testobj)/$(subst /,_,$^).failed
	$^ || echo failed > $(testobj)/$(subst /,_,$^).failed

unit-tests: build-unit-tests run-unit-tests

build-unit-tests: $(test-bins)

run-unit-tests: $(alltests)
	if [ `find $(testobj) -name '*.failed' | wc -l` -gt 0 ]; then \
		echo "**********************"; \
		echo "     TESTS FAILED     "; \
		echo "**********************"; \
		exit 1; \
	else \
		echo "**********************"; \
		echo "   ALL TESTS PASSED   "; \
		echo "**********************"; \
		exit 0; \
	fi

$(addprefix clean-,$(alltests)): clean-%:
	rm -rf $(obj)/$*

clean-unit-tests:
	rm -rf $(testobj)

list-unit-tests:
	@echo "unit-tests:"
	for t in $(sort $(alltests)); do \
		echo "  $$t"; \
	done

help-unit-tests::
	@echo  '*** unit-tests targets ***'
	@echo  '  unit-tests            - Run all unit-tests from tests/'
	@echo  '  clean-unit-tests      - Remove unit-tests build artifacts'
	@echo  '  list-unit-tests       - List all unit-tests'
	@echo  '  <unit-test>           - Build and run single unit-test'
	@echo  '  clean-<unit-test>     - Remove single unit-test build artifacts'
	@echo
