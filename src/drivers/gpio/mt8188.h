/* SPDX-License-Identifier: GPL-2.0 */

#ifndef __DRIVERS_GPIO_MT8188_H__
#define __DRIVERS_GPIO_MT8188_H__

#include <stdint.h>

enum {
	MAX_GPIO_REG_BITS = 32,
	MAX_EINT_REG_BITS = 32,
};

enum {
	GPIO_BASE = 0x10005000,
	EINT_BASE = 0x1000B000,
};

enum {
	PAD_GPIO00 = 0,
	PAD_GPIO01 = 1,
	PAD_GPIO02 = 2,
	PAD_GPIO03 = 3,
	PAD_GPIO04 = 4,
	PAD_GPIO05 = 5,
	PAD_GPIO06 = 6,
	PAD_GPIO07 = 7,
	PAD_GPIO08 = 8,
	PAD_GPIO09 = 9,
	PAD_GPIO10 = 10,
	PAD_GPIO11 = 11,
	PAD_GPIO12 = 12,
	PAD_GPIO13 = 13,
	PAD_GPIO14 = 14,
	PAD_GPIO15 = 15,
	PAD_GPIO16 = 16,
	PAD_GPIO17 = 17,
	PAD_CMMPDN0 = 18,
	PAD_CMMRST0 = 19,
	PAD_CMMPDN1 = 20,
	PAD_CMMRST1 = 21,
	PAD_CMMCLK0 = 22,
	PAD_CMMCLK1 = 23,
	PAD_CMMCLK2 = 24,
	PAD_DSI0_LCM_RST = 25,
	PAD_DSI0_DSI_TE = 26,
	PAD_DSI1_LCM_RST = 27,
	PAD_DSI1_DSI_TE = 28,
	PAD_DISP_PWM0 = 29,
	PAD_DISP_PWM1 = 30,
	PAD_UART0_TXD = 31,
	PAD_UART0_RXD = 32,
	PAD_UART1_TXD = 33,
	PAD_UART1_RXD = 34,
	PAD_UART2_TXD = 35,
	PAD_UART2_RXD = 36,
	PAD_JTMS = 37,
	PAD_JTCK = 38,
	PAD_JTDI = 39,
	PAD_JTDO = 40,
	PAD_JTRST = 41,
	PAD_KPCOL0 = 42,
	PAD_KPCOL1 = 43,
	PAD_KPROW0 = 44,
	PAD_KPROW1 = 45,
	PAD_DPTX_HPD = 46,
	PAD_PCIE_WAKE_N = 47,
	PAD_PCIE_PERESET_N = 48,
	PAD_PCIE_CLKREQ_N = 49,
	PAD_HDMITX_PWR5V = 50,
	PAD_HDMITX_HTPLG = 51,
	PAD_HDMITX_CEC = 52,
	PAD_HDMITX_SCL = 53,
	PAD_HDMITX_SDA = 54,
	PAD_SCL0 = 55,
	PAD_SDA0 = 56,
	PAD_SCL1 = 57,
	PAD_SDA1 = 58,
	PAD_SCL2 = 59,
	PAD_SDA2 = 60,
	PAD_SCL3 = 61,
	PAD_SDA3 = 62,
	PAD_SCL4 = 63,
	PAD_SDA4 = 64,
	PAD_SCL5 = 65,
	PAD_SDA5 = 66,
	PAD_SCL6 = 67,
	PAD_SDA6 = 68,
	PAD_SPIM0_CSB = 69,
	PAD_SPIM0_CLK = 70,
	PAD_SPIM0_MOSI = 71,
	PAD_SPIM0_MISO = 72,
	PAD_SPIM0_MIO2 = 73,
	PAD_SPIM0_MIO3 = 74,
	PAD_SPIM1_CSB = 75,
	PAD_SPIM1_CLK = 76,
	PAD_SPIM1_MOSI = 77,
	PAD_SPIM1_MISO = 78,
	PAD_SPIM2_CSB = 79,
	PAD_SPIM2_CLK = 80,
	PAD_SPIM2_MOSI = 81,
	PAD_SPIM2_MISO = 82,
	PAD_USB0_IDDIG = 83,
	PAD_USB0_DRV_VBUS = 84,
	PAD_USB0_VBUS_VALID = 85,
	PAD_USB1_IDDIG = 86,
	PAD_USB1_DRV_VBUS = 87,
	PAD_USB1_VBUS_VALID = 88,
	PAD_USB2_IDDIG = 89,
	PAD_USB2_DRV_VBUS = 90,
	PAD_USB2_VBUS_VALID = 91,
	PAD_PWRAP_SPI_CSN = 92,
	PAD_PWRAP_SPI_CK = 93,
	PAD_PWRAP_SPI_MO = 94,
	PAD_PWRAP_SPI_MI = 95,
	PAD_PMIC_SRCLKENA0 = 96,
	PAD_PMIC_SRCLKENA1 = 97,
	PAD_SCP_VREQ_VAO = 98,
	PAD_PMIC_RTC32K_CK = 99,
	PAD_PMIC_WATCHDOG = 100,
	PAD_AUD_CLK_MOSI = 101,
	PAD_AUD_SYNC_MOSI = 102,
	PAD_AUD_DAT_MOSI0 = 103,
	PAD_AUD_DAT_MOSI1 = 104,
	PAD_AUD_DAT_MISO0 = 105,
	PAD_AUD_DAT_MISO1 = 106,
	PAD_I2SIN_MCK = 107,
	PAD_I2SIN_BCK = 108,
	PAD_I2SIN_WS = 109,
	PAD_I2SIN_D0 = 110,
	PAD_I2SIN_D1 = 111,
	PAD_I2SIN_D2 = 112,
	PAD_I2SIN_D3 = 113,
	PAD_I2SO2_MCK = 114,
	PAD_I2SO2_BCK = 115,
	PAD_I2SO2_WS = 116,
	PAD_I2SO2_D0 = 117,
	PAD_I2SO2_D1 = 118,
	PAD_I2SO2_D2 = 119,
	PAD_I2SO2_D3 = 120,
	PAD_PCM_CLK = 121,
	PAD_PCM_SYNC = 122,
	PAD_PCM_DO = 123,
	PAD_PCM_DI = 124,
	PAD_DMIC1_CLK = 125,
	PAD_DMIC1_DAT = 126,
	PAD_DMIC1_DAT_R = 127,
	PAD_DMIC2_CLK = 128,
	PAD_DMIC2_DAT = 129,
	PAD_DMIC2_DAT_R = 130,
	PAD_DPI_D0 = 131,
	PAD_DPI_D1 = 132,
	PAD_DPI_D2 = 133,
	PAD_DPI_D3 = 134,
	PAD_DPI_D4 = 135,
	PAD_DPI_D5 = 136,
	PAD_DPI_D6 = 137,
	PAD_DPI_D7 = 138,
	PAD_DPI_D8 = 139,
	PAD_DPI_D9 = 140,
	PAD_DPI_D10 = 141,
	PAD_DPI_D11 = 142,
	PAD_DPI_D12 = 143,
	PAD_DPI_D13 = 144,
	PAD_DPI_D14 = 145,
	PAD_DPI_D15 = 146,
	PAD_DPI_HSYNC = 147,
	PAD_DPI_VSYNC = 148,
	PAD_DPI_DE = 149,
	PAD_DPI_CK = 150,
	PAD_EMMC_DAT7 = 151,
	PAD_EMMC_DAT6 = 152,
	PAD_EMMC_DAT5 = 153,
	PAD_EMMC_DAT4 = 154,
	PAD_EMMC_RSTB = 155,
	PAD_EMMC_CMD = 156,
	PAD_EMMC_CLK = 157,
	PAD_EMMC_DAT3 = 158,
	PAD_EMMC_DAT2 = 159,
	PAD_EMMC_DAT1 = 160,
	PAD_EMMC_DAT0 = 161,
	PAD_EMMC_DSL = 162,
	PAD_MSDC1_CMD = 163,
	PAD_MSDC1_CLK = 164,
	PAD_MSDC1_DAT0 = 165,
	PAD_MSDC1_DAT1 = 166,
	PAD_MSDC1_DAT2 = 167,
	PAD_MSDC1_DAT3 = 168,
	PAD_MSDC2_CMD = 169,
	PAD_MSDC2_CLK = 170,
	PAD_MSDC2_DAT0 = 171,
	PAD_MSDC2_DAT1 = 172,
	PAD_MSDC2_DAT2 = 173,
	PAD_MSDC2_DAT3 = 174,
	PAD_SPMI_M_SCL = 175,
	PAD_SPMI_M_SDA = 176,
	GPIO_NUM,
};

typedef struct {
	GpioValRegs dir[7];
	uint8_t rsv00[144];
	GpioValRegs dout[7];
	uint8_t rsv01[144];
	GpioValRegs din[7];
	uint8_t rsv02[144];
	GpioValRegs mode[28];
} GpioRegs;

typedef struct {
	uint32_t sta[16];
	uint32_t ack[16];
} EintRegs;

#endif /* __DRIVERS_GPIO_MT8188_H__ */
