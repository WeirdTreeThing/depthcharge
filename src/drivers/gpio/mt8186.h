/* SPDX-License-Identifier: GPL-2.0 */

#ifndef __DRIVERS_GPIO_MT8186_H__
#define __DRIVERS_GPIO_MT8186_H__

#include <stdint.h>

enum {
	MAX_GPIO_REG_BITS = 32,
	MAX_EINT_REG_BITS = 32,
};

enum {
	GPIO_BASE = 0x10005000,
	EINT_BASE = 0x1000B000,
};

enum {
	PAD_EINT0 = 0,
	PAD_EINT1 = 1,
	PAD_EINT2 = 2,
	PAD_EINT3 = 3,
	PAD_EINT4 = 4,
	PAD_EINT5 = 5,
	PAD_EINT6 = 6,
	PAD_EINT7 = 7,
	PAD_EINT8 = 8,
	PAD_EINT9 = 9,
	PAD_EINT10 = 10,
	PAD_EINT11 = 11,
	PAD_EINT12 = 12,
	PAD_EINT13 = 13,
	PAD_EINT14 = 14,
	PAD_EINT15 = 15,
	PAD_EINT16 = 16,
	PAD_EINT17 = 17,
	PAD_EINT18 = 18,
	PAD_CAM_PDN0 = 19,
	PAD_CAM_RST0 = 20,
	PAD_CAM_PDN1 = 21,
	PAD_CAM_RST1 = 22,
	PAD_CAM_PDN2 = 23,
	PAD_CAM_RST2 = 24,
	PAD_I2S2_MCK = 25,
	PAD_I2S2_BCK = 26,
	PAD_I2S2_LRCK = 27,
	PAD_I2S2_DI = 28,
	PAD_ANT_SEL0 = 29,
	PAD_ANT_SEL1 = 30,
	PAD_ANT_SEL2 = 31,
	PAD_URXD0 = 32,
	PAD_UTXD0 = 33,
	PAD_URXD1 = 34,
	PAD_UTXD1 = 35,
	PAD_SPI0_CLK = 36,
	PAD_SPI0_CSB = 37,
	PAD_SPI0_MO = 38,
	PAD_SPI0_MI = 39,
	PAD_SPI1_CLK = 40,
	PAD_SPI1_CSB = 41,
	PAD_SPI1_MO = 42,
	PAD_SPI1_MI = 43,
	PAD_SPI2_CK = 44,
	PAD_SPI2_CSB = 45,
	PAD_SPI2_MO = 46,
	PAD_SPI2_MI = 47,
	PAD_SPI3_CLK = 48,
	PAD_SPI3_CSB = 49,
	PAD_SPI3_MO = 50,
	PAD_SPI3_MI = 51,
	PAD_SPI5_CLK = 52,
	PAD_SPI5_CSB = 53,
	PAD_SPI5_MO = 54,
	PAD_SPI5_MI = 55,
	PAD_I2S1_DO = 56,
	PAD_I2S1_BCK = 57,
	PAD_I2S1_LRCK = 58,
	PAD_I2S1_MCK = 59,
	PAD_TDM_RX_LRCK = 60,
	PAD_TDM_RX_BCK = 61,
	PAD_TDM_RX_MCLK = 62,
	PAD_TDM_RX_DATA0 = 63,
	PAD_TDM_RX_DATA1 = 64,
	PAD_TDM_RX_DATA2 = 65,
	PAD_TDM_RX_DATA3 = 66,
	PAD_MSDC0_DSL = 67,
	PAD_MSDC0_CLK = 68,
	PAD_MSDC0_CMD = 69,
	PAD_MSDC0_RSTB = 70,
	PAD_MSDC0_DAT0 = 71,
	PAD_MSDC0_DAT1 = 72,
	PAD_MSDC0_DAT2 = 73,
	PAD_MSDC0_DAT3 = 74,
	PAD_MSDC0_DAT4 = 75,
	PAD_MSDC0_DAT5 = 76,
	PAD_MSDC0_DAT6 = 77,
	PAD_MSDC0_DAT7 = 78,
	PAD_KPCOL0 = 79,
	PAD_KPCOL1 = 80,
	PAD_KPROW0 = 81,
	PAD_KPROW1 = 82,
	PAD_AP_GOOD = 83,
	PAD_MSDC1_CLK = 84,
	PAD_MSDC1_CMD = 85,
	PAD_MSDC1_DAT0 = 86,
	PAD_MSDC1_DAT1 = 87,
	PAD_MSDC1_DAT2 = 88,
	PAD_MSDC1_DAT3 = 89,
	PAD_IDDIG_P0 = 90,
	PAD_USB_DRVVBUS_P0 = 91,
	PAD_VBUS_VALID_P0 = 92,
	PAD_IDDIG_P1 = 93,
	PAD_USB_DRVVBUS_P1 = 94,
	PAD_VBUS_VALID_P1 = 95,
	PAD_DSI_TE = 96,
	PAD_DISP_PWM = 97,
	PAD_LCM_RST = 98,
	PAD_DPI_PCLK = 99,
	PAD_DPI_VSYNC = 100,
	PAD_DPI_HSYNC = 101,
	PAD_DPI_DE = 102,
	PAD_DPI_DATA0 = 103,
	PAD_DPI_DATA1 = 104,
	PAD_DPI_DATA2 = 105,
	PAD_DPI_DATA3 = 106,
	PAD_DPI_DATA4 = 107,
	PAD_DPI_DATA5 = 108,
	PAD_DPI_DATA6 = 109,
	PAD_DPI_DATA7 = 110,
	PAD_DPI_DATA8 = 111,
	PAD_DPI_DATA9 = 112,
	PAD_DPI_DATA10 = 113,
	PAD_DPI_DATA11 = 114,
	PAD_PCM_CLK = 115,
	PAD_PCM_SYNC = 116,
	PAD_PCM_DI = 117,
	PAD_PCM_DO = 118,
	PAD_JTMS_SEL1 = 119,
	PAD_JTCK_SEL1 = 120,
	PAD_JTDI_SEL1 = 121,
	PAD_JTDO_SEL1 = 122,
	PAD_JTRSTN_SEL1 = 123,
	PAD_CAM_CLK0 = 124,
	PAD_CAM_CLK1 = 125,
	PAD_CAM_CLK2 = 126,
	PAD_SCL0 = 127,
	PAD_SDA0 = 128,
	PAD_SCL1 = 129,
	PAD_SDA1 = 130,
	PAD_SCL2 = 131,
	PAD_SDA2 = 132,
	PAD_SCL3 = 133,
	PAD_SDA3 = 134,
	PAD_SCL4 = 135,
	PAD_SDA4 = 136,
	PAD_SCL5 = 137,
	PAD_SDA5 = 138,
	PAD_SCL6 = 139,
	PAD_SDA6 = 140,
	PAD_SCL7 = 141,
	PAD_SDA7 = 142,
	PAD_SCL8 = 143,
	PAD_SDA8 = 144,
	PAD_SCL9 = 145,
	PAD_SDA9 = 146,
	PAD_PERIPHERAL_EN0 = 147,
	PAD_PERIPHERAL_EN1 = 148,
	PAD_PERIPHERAL_EN2 = 149,
	PAD_PERIPHERAL_EN3 = 150,
	PAD_PERIPHERAL_EN4 = 151,
	PAD_PERIPHERAL_EN5 = 152,
	PAD_PERIPHERAL_EN6 = 153,
	PAD_PERIPHERAL_EN7 = 154,
	PAD_PERIPHERAL_EN8 = 155,
	PAD_PERIPHERAL_EN9 = 156,
	PAD_PWRAP_SPI0_CSN = 157,
	PAD_PWRAP_SPI0_CK = 158,
	PAD_PWRAP_SPI0_MO = 159,
	PAD_PWRAP_SPI0_MI = 160,
	PAD_SRCLKENA0 = 161,
	PAD_SRCLKENA1 = 162,
	PAD_SCP_VREQ_VAO = 163,
	PAD_RTC32K_CK = 164,
	PAD_WATCHDOG = 165,
	PAD_AUD_CLK_MOSI = 166,
	PAD_AUD_SYNC_MOSI = 167,
	PAD_AUD_DAT_MOSI0 = 168,
	PAD_AUD_DAT_MOSI1 = 169,
	PAD_AUD_CLK_MISO = 170,
	PAD_AUD_SYNC_MISO = 171,
	PAD_AUD_DAT_MISO0 = 172,
	PAD_AUD_DAT_MISO1 = 173,
	PAD_CONN_TOP_CLK = 174,
	PAD_CONN_TOP_DATA = 175,
	PAD_CONN_BT_CLK = 176,
	PAD_CONN_BT_DATA = 177,
	PAD_CONN_HRST_B = 178,
	PAD_CONN_WB_PTA = 179,
	PAD_CONN_WF_CTRL0 = 180,
	PAD_CONN_WF_CTRL1 = 181,
	PAD_CONN_WF_CTRL2 = 182,
	PAD_SPMI_SCL = 183,
	PAD_SPMI_SDA = 184,
	GPIO_NUM,
};

typedef struct {
	GpioValRegs dir[7];
	uint8_t rsv00[144];
	GpioValRegs dout[7];
	uint8_t rsv01[144];
	GpioValRegs din[7];
	uint8_t rsv02[144];
	GpioValRegs mode[28];
} GpioRegs;

typedef struct {
	uint32_t sta[16];
	uint32_t ack[16];
} EintRegs;

#endif /* __DRIVERS_GPIO_MT8186_H__ */
